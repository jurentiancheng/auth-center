//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "user")]
//#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = true)]
    #[serde(skip_deserializing)] // Skip deserializing
    pub id: i64,
    pub user_name: String,
    pub real_name: Option<String>,
    pub password: Option<String>,
    #[sea_orm(default_value = 0, nullable)]
    pub status: Option<i8>,
    #[sea_orm(default_value = 0, nullable)]
    pub r#type: Option<i8>,
    pub email: Option<String>,
    pub area_code: Option<String>,
    pub phone: Option<String>,
    pub remark: Option<String>,
    #[sea_orm(default_value = 0, nullable)]
    pub is_del: Option<i8>,
    pub head_pic: Option<String>,
    pub create_time: Option<DateTime>,
    pub update_time: Option<DateTime>,
    #[sea_orm(default_value = 0, nullable)]
    pub create_by: Option<i64>,
    #[sea_orm(default_value = 0, nullable)]
    pub update_by: Option<i64>,
    #[sea_orm(default_value = 0, nullable)]
    pub is_admin: Option<i8>,
    pub open_id: Option<String>,
    pub last_login_time: Option<DateTime>,
    pub wechat_open_id: Option<String>,
    pub wechat_union_id: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
